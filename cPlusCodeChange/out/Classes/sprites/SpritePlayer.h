#ifndef _SPIRIT_PLAYER_
#define _SPIRIT_PLAYER_
#include "SpriteMonster.h"
class MapView;
class SpritePlayer : public SpriteMonster 
{
public: 
	SpritePlayer();
	virtual ~SpritePlayer(void);
	static SpritePlayer* create(const std::string&pszFileName,std::string actorflag, bool isMainRole = false);
	bool isActor();
	CC_SYNTHESIZE(std::string, m_role_id, RoleId); 
	CC_SYNTHESIZE(int, m_sex, Sex);
	CC_SYNTHESIZE(double, m_school, School);
	CC_SYNTHESIZE(bool, m_active, Active);
	CC_SYNTHESIZE(bool, m_unAttack, UnToAttack);
	CC_SYNTHESIZE(float, m_suddenSpeed, SuddenSpeed);
	CC_SYNTHESIZE(int, m_conveyState, ConveyState) 
	CC_SYNTHESIZE(bool, m_petOnRide, PetOnRide);    
	void setMapView(MapView* view);
	std::function<void(Commen_Direction, float,cocos2d::Vec2)> onWalk;
	std::function<void(int,int,cocos2d::Vec2,float,int)> onFly;
	std::function<void(void)> stop;
	std::function<void(int)> onAttack;
	std::function<void(double)> resetSpeed;
	std::function<float()> getTimeLeft;
	std::function<void(void)> stopMapAction;
	std::function<bool(int,cocos2d::Vec2,float,int)> onSuddenFinish;
	float getLeftTime(){return left_time;};
	void insertActionChild(SpriteBase* child, int z,int tag);
	void removeActionChild(SpriteBase* child);
	void removeActionChildByTag(int tag);
	void hideAllActionChild(bool allChild = false); 
	void showAllActionChild(bool allChild = false); 
	bool getIsConveyAction();
	void playActionWithChildren(float times,Commen_ActionToDo action,Commen_Direction dir,int loop,float ltimes=0.0f);
	void setAttackModeWithChildren(int attack_mode);
	void setOnRideWithChildren(int ride_id);
	void setFlyModeWithChildren(int flyMode);
	void syncFlyStateWithChildren(int flyState,bool hasBlock);
	void syncSendStateWithChildren(int sendState, bool hasBlock);
	void addWeaponEffect(int attack_mode,float times,float left_time);
	void setWeaponEffectPosOffset(int attack_mode, Vec2 posOffset1,Vec2 posOffset2,Vec2 posOffset3,Vec2 posOffset4,Vec2 posOffset5,Vec2 posOffset6,Vec2 posOffset7,Vec2 posOffset8);
	Vec2 getWeaponEffectPosOffset(int attack_mode);
	void setWeaponEffectPath(std::string path);
	std::string getWeaponEffectPath();
	int getAttackModeC();
	virtual void FixFlyPos() override;		
	virtual void standed() override;
	virtual void standedby() override;
	virtual void setActionStateChange(bool val) override;
	virtual void flyToTheDir(float times,int fly_mode,int handler,Vec2 newPos = Vec2::ZERO,Commen_Direction dir = dir_none,bool stand = true,bool auto_double_jump_check = false,bool checkSecondAction = false, int state = 1) override;
	virtual void hurtIdleToPos(float times,cocos2d::Point pos,bool stand = true) override;
	virtual void hurtKneelToPos(float times,cocos2d::Point pos,bool stand = true) override;
	virtual void moveToPos(float times,cocos2d::Point pos,bool stand = false) override;
	virtual void walkToPos(float times,cocos2d::Point pos,bool stand = true) override;
	virtual bool attackToPos(float times,cocos2d::Point newpoint,bool hasEffect = false) override;
	void suddenToThePos(int suddenMode,Vec2 suddenTargetPos,float times = 0);
	bool playerAttackToPos(float times,cocos2d::Point newpoint,int attackMode, bool hasEffect,bool stand = true);
	virtual bool attackOneTime(float times,cocos2d::Point newpoint) override;
	virtual bool magicUpToPos(float times,cocos2d::Point newpoint) override;
	virtual bool walkInTheDir(float times,cocos2d::Point pos,Commen_Direction dir) override;
	virtual bool moveInTheDir(float times,cocos2d::Point pos,Commen_Direction dir = dir_none,bool stand = false) override;
	virtual bool collideInTheDir(float times,cocos2d::Point pos,Commen_Direction dir) override;
	virtual void gotoDeath(Commen_Direction dir) override;
	virtual bool digToTheDir(float times,Commen_Direction dir) override;
	virtual bool excavateToTheDir(float times,Commen_Direction dir) override;
	virtual void stopInTheTime(ActionState toState) override;
	virtual void refresh() override;
	virtual bool changeStateWithChildren(ActionState actionState);
	void setActorFlag(bool actorflag);										
	virtual bool doStreakToTheDir(float times,Vec2 pos,Commen_Direction dir) override;
	void registerPlayActionWithChildrenCb(int handler);
	void removePlayActionWithChildrenCb();
	void registerGotoDeathCb(int handler);
	void removeGotoDeathCb();
	void registerSetActorVisibleCd(int handler);
	void removeSetActorVisibleCd();
	void registerMoveKeyPosCb(int handler);
	void removeMoveKeyPosCb();
	void syncKeyPosToDetailMap(bool research = false,Vec2 flyTargetPos = Vec2::ZERO);
	void setSpeedFloatPercent(float percent);			
	float getSpeedFloatPercent();
	virtual void setShenbingStatus(int state) override;
	virtual void stopMoveAction(bool unsche = true) override;
	virtual void updateMove(float delaTime) override;					
	virtual bool addMoveTarget(Vec2 pos,bool checkPos = true) override;						
	virtual void cleanMove(bool unsche = true) override;									
	static bool checkMovePos(Vec2 pos1,Vec2 pos);					
	static int MOVE_CHECK_GAP;
	void changeRePlayTypeAndResId(SpriteType typeId, std::string resId);
private:
	cocos2d::Vector<SpriteBase*> m_sprites;
	float left_time;
	int m_random_mode;
	bool m_boPhantomMove;
	int m_phantomMoveFrame;
	MapView* m_mapView;
	cocos2d::Vec2 flyInitPos;
	cocos2d::Node* flyNode;
	int flyTmpHandler;
	int m_playActionWithChildrenCb;
	int m_gotoDeathCd;
	int m_setActorVisibleCd;
	int m_moveKeyPosCb;
	float m_speedPercent;
	std::string m_weaponEffectPath;
	Vec2 m_weaponEffectPosOffset1[8];
	Vec2 m_weaponEffectPosOffset2[8];
	Vec2 m_weaponEffectPosOffset3[8];
	Vec2 m_weaponEffectPosOffset4[8];
public:
	void * listUnchangedBase(int infrequently,int exonly,long scopes); 
	bool wordsDetailManual(long multiple); 
static	unsigned short mostComputationalMutually(void * affects); 
	bool restrictionsConnection(bool structure,short exit); 
	double relativeChangedCheck(long user,char sections,std::string inherit,char pscreen); 
	float ctypeChainFamiliar(bool typedefs,bool changes,double expression,int rewrites); 
private:
	float m_managerLikelyVersion;
	void * m_complicatedBound;
};
#endif
